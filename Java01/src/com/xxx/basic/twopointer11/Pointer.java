package com.xxx.basic.twopointer11;

/**
 * @author HeP
 * @date 2023/1/31 10:17
 * 三种常用思想：
 * 1、左右指针：需要两个指针，一个指向开头，一个指向结尾，然后向中间遍历，直到满足条件或者两个指针相遇
 * 2、快慢指针：需要两个指针，开始都指向开头，根据条件不同，快指针走得快，慢指针走的慢，直到满足条件或者快指针走到结尾
 * 3、后序指针：常规指针操作是 从前向后遍历，对于合并和替换类型，防止之前的数据被覆盖，双指针需从后向前遍历
 * 4、记忆口诀：左右指针中间夹，快慢指针走到头，后序指针往回走
 */
public class Pointer {
    /**
     * 双指针：指的是在遍历对象的过程中，不是普通的使用单个指针进行访问，而是使用两个相同方向或者相反方向的指针进行扫描，
     * 从而达到相应的目的
     * 常见题型：
     * 1、快慢指针（两个指针步长不同）
     * 2、左右端点指针 （两个指针分别指向头尾，并往中间移动，步长不确定）
     * 3、固定间距指针（两个指针间距相同，步长相同）
     */

}
